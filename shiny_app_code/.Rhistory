cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
print("getting cached data")
return(inv)
}
else {print("here")}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cacheSolve(makeCacheMatrix(m))
mc <- makeCacheMatrix(m)
mc
mc$get()
cacheSolve(mc)
cacheSolve(mc)
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cacheSolve(mc)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(i) inv <<- i
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
mc <- makeCacheMatrix(m)
cacheSolve(mc)
cacheSolve(mc)
cacheSolve(mc)
m <- matrix(1:4, 2,2)
cacheSolve(mc)
cacheSolve(mc)
mc <- makeCacheMatrix(m)
cacheSolve(mc)
cacheSolve(mc)
library(xlsx)
options(java.home="C:\\environment\\java\\jdk7_32_0\\jre")
library(rJava)
install.packages("XLSX")
yes
install.packages("xlsx")
install.packages("rJava")
getwd()
library(datasets)
head(airquality)
head(airquality, n=20)
a <- transform(airquality, Month = factor(Month))
a0 <- airquality
head(a, n=20)
boxplot(Ozone ~ Month, a)
boxplot(Ozone ~ Month, airquality)
?Devices
a
install.packages("knitr")
install.packages("xtable")
?pbinom
1 - pbinom(3,5,.5)
?pnorm
pnorm(16, 15, 10)
pnorm(16, 15, 10) - pnorm(14, 15, 10)
$1
pnorm(16, 15, 10) - pnorm(14, 15, 10)
?unif
?punif
runif(10, .5, .5)
ppois(10,15)
install.packages("combinat")
choose(9,3)
library(combinat)
combn(9,3)
length(combn(9,3))
length(combn(9,3)[1,])
length(combn(9,3)[,1])
9*8*7
length(combn(9,3)[1,])
length(combn(9,3)[1,])
length(combn(9,3)[,1])
pnorm(70, 80, 10)
qnorm(.95, 1100, 75)
qnorm(.95, 1100, 75/sqrt(100))
pnorm(1)
pnorm(-1)
pnorm(1) - pnorm(-1)
choose(9,3)
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(father.son)
x <- father.son$sheight
length(x)
n <- length(x)
s <- sd(x)
m <- mean(x)
sqrt((n-1)*s^2/qchisq(c(0.975, 0.025), n-1))
a <- 1-.95
sqrt((n-1)*s^2/qchisq(c(1-a/2, a/2), n-1))
m <- 1100
s <- 30
n <- 9
m + c(1,-1)*qt(1-a/2, n-1)*s/sqrt(n)
m <- -2
n <- 9
m + c(-1,1)*qt(1-a/2, n-1)*s/sqrt(n)
s <- 0.1
m + c(-1,1)*qt(1-a/2, n-1)*s/sqrt(n)
m + c(-1,1)*qt(1-a/2, n-1)*0.2/sqrt(n)
m + c(-1,1)*qt(1-a/2, n-1)*0.3/sqrt(n)
m + c(-1,1)*qt(1-a/2, n-1)*0.9/sqrt(n)
m + c(-1,1)*qt(1-a/2, n-1)*1/sqrt(n)
m + c(-1,1)*qt(1-a/2, n-1)*2/sqrt(n)
m + c(-1,1)*qt(1-a/2, n-1)*3/sqrt(n)
m + c(-1,1)*qt(1-a/2, n-1)*2.5/sqrt(n)
m + c(-1,1)*qt(1-a/2, n-1)*2.00/sqrt(n)
m <- -2
.6+.68
sqrt(.6+.68)
s <- sqrt(.6+.68)
s
m + c(-1,1)*qt(1-a/2, n-1)*s/sqrt(n)
a <- .1
m + c(-1,1)*qt(1-a/2, n-1)*s/sqrt(n)
a <- .05
n <- 10
m + c(-1,1)*qt(1-a/2, n-1)*s/sqrt(n)
n <- 100
s <- sqrt(.5^2 + 2^2)
s
m + c(-1,1)*qt(1-a/2, n-1)*s/sqrt(n)
m <- 2
m + c(-1,1)*qt(1-a/2, n-1)*s/sqrt(n)
m <- -4
s <- sqrt(1.5^2 + 1.8^2)
n <- 9
m + c(-1,1)*qt(1-a/2, n-1)*s/sqrt(n)
s <- sqrt(((n-1)*1.5^2 + (n-1)*1.8^2)/(n+n-2))
s
m + c(-1,1)*qt(1-a/2, n-1)/(s*sqrt(1/n + 1/n))
s <- sqrt(((n-1)*1.5^2 + (n-1)*1.8^2)/(n+n-2))
sp <- 16.9
mp <- 105.5 - 90.9
mp + c(-1,1)*qt(1-a/2, 61)/(sp*sqrt(1/34 + 1/29))
mp + c(-1,1)*qt(1-a/2, 61)*(sp/sqrt(1/34 + 1/29))
mp + c(-1,1)*qt(1-a/2, 61)*sp/sqrt(1/34 + 1/29)
c(-1,1)*qt(1-a/2, 61)
1100 + c(-1,1)*2.306*30/3
?pt
pt(.975, 8)
dt(.975, 8)
dt(.95, 8)
dt(.025, 8)
dt(.05, 8)
1-0.025
qt(.975, 8)
6/qt(.975, 8)
n <- 10
x <- 3-5
s1 <- .6
s1 <- sqrt(.6)
s2 <- sqrt(.68)
s1^2
s <- sqrt(((n-1)*s1^2 + (n-1)*s2^2)/(n+n-2))
s
x + c(-1,1)*qt(.975,18)*s*sqrt(1/10 + 1/10)
-2 + c(-1,1)*qt(.975,8)*2.601903/3
-2 + c(-1,1)*qt(.975,8)*(6/qt(.975, 8))/3
-2 + c(-1,1)*qt(.975,8)*2.7/3
sd1 <- 1.5
sd2 <- 1.8
x1 <- -3
x2 <- 1
sdc <- sqrt(((9-1)*sd1^2 + (9-1)*sd2^2)/(9+9-2))
x1-x2 + c(-1,1)*qt(.975,16)*sdc*sqrt(1/9 + 1/9)
qnorm(.95)
qnorm(.05)
(17.87 - 10)
z <- (17.87 - 10)
pnorm(-abs(z))
v <- rnorm(n=100, mean=10, sd=10)
t.test(v)
t.test(head(v, n=10))
t.test(head(v, n=5))
t.test(head(v, n=20))
v <- rnorm(n=100, mean=1, sd=1)
t.test(head(v, n=20))
t.test(v)
t.test(head(v, n=5))
=(44-42.04)/(12/sqrt(288))
(44-42.04)/(12/sqrt(288))
z <- (44-42.04)/(12/sqrt(288))
pnorm(-abs(z))
2*pnorm(-abs(z))
qnorm(.95)
qnorm(.95)*4/10 + 12
(17.87 - 10)/10
pnorm(-abs(1.92))
pnorm(-abs(1.645))
z <- (17.87 - 10)/10
pnorm(-abs(z))
1 - pnorm(-abs(z))
1 - pnorm(-abs(0))
1 - pnorm(-abs(-0.5))
z <- (10 - 17.87)/17.87
z
pnorm(-abs(0))
pnorm(-abs(-.5))
pnorm(-abs(1.5))
pnorm(-abs(1.2))
pnorm(-abs(1))
pnorm(-abs(-1))
pnorm(-abs(z))
1-pnorm(-abs(z))
10/1787
poisson.test(10/1787, alternative="less")
1/12
(1/12)/sqrt(1000)
(1/12)/sqrt(1000000)
(1/12)/sqrt(100000)
(1/12)/(100*100)
(1/12)/(1000)
sqrt((1/12)/(1000))
sqrt((1/12)/(100))
sd(runif(100))
sd(runif(1000))
sd(runif(10000))
sd(runif(100000))
sd(c(mean(runif(10)),mean(runif(10)),mean(runif(10)),mean(runif(10)),mean(runif(10))))
sd(c(mean(runif(100)),mean(runif(100)),mean(runif(100)),mean(runif(100)),mean(runif(100))))
sd(c(mean(runif(1000)),mean(runif(1000)),mean(runif(1000)),mean(runif(1000)),mean(runif(1000))))
sd(c(mean(runif(100)),mean(runif(100)),mean(runif(100)),mean(runif(100)),mean(runif(100))))
sd(c(mean(runif(10)),mean(runif(10)),mean(runif(10)),mean(runif(10)),mean(runif(10))))
sd(c(mean(runif(100)),mean(runif(100)),mean(runif(100)),mean(runif(100)),mean(runif(100))))
sd(c(mean(runif(1000)),mean(runif(1000)),mean(runif(1000)),mean(runif(1000)),mean(runif(1000))))
sd(c(mean(runif(100)),mean(runif(100)),mean(runif(100)),mean(runif(100)),mean(runif(100))))
sd(c(mean(runif(100)),mean(runif(100)),mean(runif(100)),mean(runif(100)),mean(runif(100))))
library(lattice)
x <- c(1:100)
y <- rbinom(100, 2, .5)
xyplot(x=x, data=y)
xyplot(y~x)
g <- xyplot(y~x)
class(g)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(BodyWeight)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
unique(airquality$Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
head(movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
head(movies)
data(mtcars)
head(mtcars)
?mtcars
d <- data.frame(mtcars$cyl)
head(d)
head(d, n=10)
hist(x=d$mtcars.cyl)
d <- data.frame(mtcars$cyl, mtcars$mpg)
plot(mtcars$cyl, mtcars$mpg)
plot(mtcars$cyl, mtcars$mpg, ltype=1)
plot(mtcars$cyl, mtcars$mpg)
d <- data.frame(mtcars$cyl, mtcars$mpg)
install.packages("UsingR")
library(UsingR)
data(galton)
par(mfrow = (1,2))
par(mfrow = c(1,2))
hist(galton$child, breaks=100)
hist(galton$parent, breaks=100)
library(manipulate)
mu = slider(62, 74, step=0.75)
mu
myHist <- function(mu) {
hist(galton$child, col="blue", breaks=100)
lines(x=c(mu, mu), y=c(0, 150), col="red", lwd=5)
mse <- mean((galton$child - mu)^2)
text(x=63, y=150,labels=paste("mu = ", mu))
text(x=63, y=140,labels=paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu=slider(62, 74, step=.5))
manipulate(myHist(mu), mu=slider(62, 74, step=.5))
manipulate(myHist(mu), mu=slider(62, 74, step=.5))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
d <- x*w
d
mean(d)
myPlot <- function(beta) {
x <- galton$parent - mean(galton$parent)
y <- galton$child - mean(galton$child)
freqData <- as.data.frame(table(x,y))
names(freqData) <- c("child", "parent", "freq")
plot(x=as.numeric(as.vector(freqData$parent)),
y=as.numeric(as.vector(freqData$child)),
pch=21, col="black", bg="lightblue",
cex=.1*freqData$freq,
xlab="parent",
ylab="child")
abline(a=0, b=beta, lwd=3)
points(x=0, y=0, cex=2, pch=19)
mse <- mean((y - beta*x)^2)
title(paste("beta = ", beta, " mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), slider(min=.6, max=1.2, step=.02))
myPlot <- function(beta) {
x <- galton$parent - mean(galton$parent)
y <- galton$child - mean(galton$child)
freqData <- as.data.frame(table(x,y))
names(freqData) <- c("child", "parent", "freq")
plot(x=as.numeric(as.vector(freqData$parent)),
y=as.numeric(as.vector(freqData$child)),
pch=21, col="black", bg="lightblue",
cex=.1*freqData$freq,
xlab="parent",
ylab="child")
abline(a=0, b=beta, lwd=3)
points(x=0, y=0, cex=2, pch=19)
mse <- mean((y - beta*x)^2)
title(paste("beta = ", beta, " mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta=slider(min=.6, max=1.2, step=.02))
x <- galton$parent - mean(galton$parent)
y <- galton$child - mean(galton$child)
freqData <- as.data.frame(table(x,y))
head(freqData)
head(x)
head(y)
head(table(x,y))
myPlot <- function(beta) {
x <- galton$parent - mean(galton$parent)
y <- galton$child - mean(galton$child)
freqData <- as.data.frame(table(x,y))
names(freqData) <- c("parent", "child", "freq")
plot(x=as.numeric(as.vector(freqData$parent)),
y=as.numeric(as.vector(freqData$child)),
pch=21, col="black", bg="lightblue",
cex=.1*freqData$freq,
xlab="parent",
ylab="child")
abline(a=0, b=beta, lwd=3)
points(x=0, y=0, cex=2, pch=19)
mse <- mean((y - beta*x)^2)
title(paste("beta = ", beta, " mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta=slider(min=.6, max=1.2, step=.02))
lm(I(child - mean(child)) ~ I(parent - mean(parent)) - 1, data=galton)
x <- c(0.18, -1.54, 0.42, 0.95)
p <- sum(w*(x - 1.077)^2)
sum(w*(x - 1.077)^2)
sum(w*(x - .3)^2)
sum(w*(x - .0025)^2)
sum(w*(x - .1417)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
cor(x,y)
cor(y,y)
cor(y,x)
lm(y ~ x)
lm(y ~ 0+x)
data(mtcars)
lm(mtcars$mpg ~ mtcars$wt)
a <- c(8.58, 10.46, 9.01, 9.64, 8.86)
a[1]
(a[1] - mean(a))/std(a)
(a[1] - mean(a))/sd(a)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
lm(y ~ x)
lm(y ~ x)[2]
lm(y ~ x)[1]
lm(y ~ x)[1][2]
lm(y ~ x)[[1]]
lm(y ~ x)
lm(x ~ y)
-1.713/-0.04462
cor(x,y)
2*sd(y)/sd(x)
var(y)/var(x)
cor(1,2)
cor(c(1),c(2))
cor(c(1..10),c(2..11))
cor(c(1:10),c(2:11))
cor(c(1:1),c(2:2))
-1.713*-0.04462
cor(c(1,1,1,1),c(2,2,2,2))
cor(c(1,1,1,1),c(2,2,2,3))
cor(c(1,1,1,2),c(2,2,2,3))
mean(c(1,2))
cor(c(1,2),c(1,2))
cor(c(1,1.1),c(1,2))
cor(c(11.4,1.1),c(1,2))
cor(c(1.4,1.1),c(1,2))
cor(c(1.4,5),c(1,2))
cor(c(1,5),c(1,2))
setwd("~/Other/res/mylearning/Data Science/9. Developing Data Products/sample5")
library(shiny)
runApp()
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
t.test(x=x, y=y)
b1 <- cor(y,x)*sd(y)/sd(x)
b0 <- mean(y) - b1*mean(x)
e <- y - b0 - b1*x
sigma <- sqrt(sum(e^2)/(length(y)-2))
ssx <- sum((x - mean(x))^2)
seb1 <- sigma/sqrt(ssx)
tb1 <- b1/seb1
pb1 <- 2*pt(abs(tb1), df=length(y)-2)
pb1 <- 2*pt(abs(tb1), df=length(y)-2, lower.tail=F)
lm(y~x)
fit <- lm(y~x)
resid(fit)
summary(fit)
attach(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
mean(x)
fit
summary(fit$coefficients)
summary(fit
)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
s <- summary(fit$coefficients)
head(s)
s <- summary(fit)$coefficients
newData <- data.frame(x=x)
p1 <- predict(fit, newData, interval=("confidence"))
predict(fit, newData, interval=("confidence"))
newData <- data.frame(x=mean(x))
predict(fit, newData, interval=("confidence"))
?mtcars
newData <- data.frame(x=3)
predict(fit, newData, interval=("confidence"))
mean(x)
y <- mtcars$mpg
x1 <- mtcars$cyl
x2 <- mtcars$wt
coef(lm(y~x1))
coef(lm(y~x2))
coef(lm(y~x1+x2))
fit <- lm(y~x1+x2)
newData <- data.frame(x1=8)
predict(fit, newData, interval=("confidence"))
newData <- data.frame(x1=8, x2=0)
predict(fit, newData, interval=("confidence"))
newData <- data.frame(x1=4, x2=0)
predict(fit, newData, interval=("confidence"))
33.65508-27.6239
